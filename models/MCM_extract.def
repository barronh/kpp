
#LANGUAGE Fortran90
#INTEGRATOR kpp_lsode
#DRIVER ./driver
#MEX OFF
#HESSIAN OFF

#include RateFunctions.inc

#INLINE F90_GLOBAL
  REAL(dp) :: PRESS, LAT, LON, O3COL, JO1D, JNO2, H2O, H2, N2O, CH4, M, O2, N2,&
 & RO2 = 0
  REAL(dp), parameter :: AVOGADRO = 6.02214179e23 ! molecules mol-1
  REAL(dp), parameter :: R = 8.314472 * 1e6 ! cm3 Pa K-1 mol-1
  REAL(dp) :: JDAY, THETA
  INTEGER :: INIT_TIME, NOX(NVAR), ncconcid, ncrateid, ncirrid, isims
  INTEGER :: ncconcids(NVAR), ncrateids(NREACT), ncirrids(NREACT), ncstdids(10)
  REAL(dp):: CONSTRAIN(NVAR)
  REAL(dp), dimension(10000) :: VLAT, VLON, VTEMP, VPRESS, VH2O
  LOGICAL :: SPEC_CH4, SPEC_H2, SPEC_N2O
  INTEGER :: IntTime, IntCount
  LOGICAL :: CONSTRAIN_NOX
  LOGICAL :: CONSTRAIN_RUN, LAST_POINT, OUTPUT_LAST
  CHARACTER(LEN=15) :: spec_name(10000)
  INTEGER :: const_method(10000)
!Photolysis variables
  include 'tuv_old/params'
  INTEGER, parameter :: NSZAS = 19, NJ = kj
  INTEGER, parameter :: IDATE = 19840701, JDATE = 1984184

  REAL*8::bs(NSZAS,NJ), cs(NSZAS,NJ),ds(NSZAS,NJ)
  REAL::svj_tj(kt,kj), szas(kt), jfactno2, jfacto1d
!End photolysis variables

#ENDINLINE {above lines go into MODULE KPP_ROOT_Global}

#INLINE F90_INIT
 TSTART = (12.*3600.) ! seconds
 TEND = TSTART + (3.*24.*3600.) ! seconds
 DT = 1./15.*3600. ! seconds
 TEMP = 230. ! K
 PRESS = 298.30 ! hPa
 M = AVOGADRO * PRESS * 100. /TEMP/R ! molecules cm-3
#ENDINLINE

#INLINE F90_RCONST 
 USE constants
 !end of USE statements 
 !
 ! start of executable statements

 REAL ZENITH
 REAL(kind=dp) :: Time2
 PRESS = VPRESS(IntCount)
 TEMP = VTEMP(IntCount)
 LAT = VLAT(IntCount)
 LON = VLON(IntCount)
 M = AVOGADRO * PRESS * 100 / TEMP / R ! molecules cm-3
 CFACTOR = M * 1.e-6
 H2O = VH2O(IntCount) * CFACTOR
 N2 = 0.7808*M
 O2 = 0.2095*M
 Time2=mod(Time/(60.*60.), 24.)
 ! Assuming fixed will always contain O2
 IF (NFIX .GT. 0) THEN
    FIX(indf_O2) = O2
 ENDIF
 IF (IntCount .GT. 1) THEN
   IF (VPRESS(IntCount-1) .NE. PRESS .OR. VTEMP(IntCount-1) .NE. TEMP) THEN
     call update_tuv()
   ENDIF
 ELSE
   call update_tuv()
 ENDIF

 THETA=DBLE( ZENITH ( REAL(LAT), REAL(LON), IDATE, REAL(Time2) ))
#ENDINLINE 

#INCLUDE MCM_inorganic.spc
#INCLUDE MCM_organic.def
#INCLUDE MCM_inorganic.rxn
#INCLUDE MCM_additions.rxn
#MONITOR O3; NO; NO2;
#LOOKATALL

#INLINE F90_UTIL

! ****************************************************************
!                            
! InitSaveData - Opens the data file for writing
!   Parameters :                                                  
!
! ****************************************************************

      SUBROUTINE NewInitSaveData(counter, nsteps)

        USE model_Parameters, ONLY : NREACT, NVAR
        USE model_monitor, ONLY : SPC_NAMES, EQN_NAMES
        USE model_GLOBAL, only : ncconcid, ncrateid, ncirrid, JDAY, ncconcids, ncrateids, ncirrids
        USE netcdf, ONLY : NF90_CREATE, NF90_DEF_DIM, NF90_PUT_ATT, NF90_UNLIMITED, &
                           NF90_CLASSIC_MODEL, NF90_NETCDF4, NF90_SHARE, NF90_GLOBAL, &
                           NF90_ENDDEF
  
        Integer counter, length, ierr, i, dimid, status, nsteps
        character*200 filename
        character*200 eqnname, filename1
        write(filename1,'(i4)') counter

        filename='MCM_Spec_'//TRIM(ADJUSTL(filename1))//'.nc'
        
        call checknc(nf90_create(filename, NF90_CLASSIC_MODEL, ncconcid))
        call checknc(nf90_def_dim(ncconcid, 'SIM', NF90_UNLIMITED, dimid))
        call checknc(nf90_def_dim(ncconcid, 'TSTEP', nsteps, dimid))
        call checknc(nf90_def_dim(ncconcid, 'DATE-TIME', 2, dimid))
        call checknc(nf90_def_dim(ncconcid, 'VAR', 1, dimid))
        call checknc(nf90_put_att(ncconcid, nf90_GLOBAL, 'MECH', 'MCM'))
        call checknc(nf90_put_att(ncconcid, nf90_GLOBAL, 'SDATE', JDAY))
        
        call AddStdVar(ncconcid)

        DO i = 1, NVAR
            call AddVarWithUnitDesc(ncconcid, TRIM(SPC_NAMES(i)), 'ppm', &
              TRIM(SPC_NAMES(i))//' in micromoles per mole of air', ncconcids(i))
        ENDDO
        call checknc(nf90_enddef(ncconcid))

        filename='MCM_Rate_'//TRIM(ADJUSTL(filename1))//'.nc'

        call checknc(nf90_create(filename, NF90_CLASSIC_MODEL, ncrateid))
        call checknc(nf90_def_dim(ncrateid, 'SIM', NF90_UNLIMITED, dimid))
        call checknc(nf90_def_dim(ncrateid, 'TSTEP', nsteps, dimid))
        call checknc(nf90_def_dim(ncrateid, 'DATE-TIME', 2, dimid))
        call checknc(nf90_def_dim(ncrateid, 'VAR', 1, dimid))
        call checknc(nf90_put_att(ncrateid, nf90_GLOBAL, 'MECH', 'MCM'))
        call checknc(nf90_put_att(ncrateid, nf90_GLOBAL, 'SDATE', JDAY))
        
        call AddStdVar(ncrateid)
        
        DO i = 1, NREACT
            write(eqnname,'(i4)') I
            eqnname = 'RXN_'//TRIM(ADJUSTL(eqnname))
            call AddVarWithUnitDesc(ncrateid, TRIM(eqnname), 'molecules * cm**-3', &
              TRIM(EQN_NAMES(i))//' in molecules per cubic centimenter', ncrateids(i))          
        ENDDO
        call checknc(nf90_enddef(ncrateid))

        filename='MCM_IRR_'//TRIM(ADJUSTL(filename1))//'.nc'

        call checknc(nf90_create(filename, NF90_CLASSIC_MODEL, ncirrid))
        call checknc(nf90_def_dim(ncirrid, 'SIM', NF90_UNLIMITED, dimid))
        call checknc(nf90_def_dim(ncirrid, 'TSTEP', nsteps, dimid))
        call checknc(nf90_def_dim(ncirrid, 'DATE-TIME', 2, dimid))
        call checknc(nf90_def_dim(ncirrid, 'VAR', 1, dimid))
        call checknc(nf90_put_att(ncirrid, nf90_GLOBAL, 'MECH', 'MCM'))
        call checknc(nf90_put_att(ncirrid, nf90_GLOBAL, 'SDATE', JDAY))
        
        call AddStdVar(ncirrid)
        
        DO i = 1, NREACT
            write(eqnname,'(i4)') I
            eqnname = 'IRR_'//TRIM(ADJUSTL(eqnname))
            call AddVarWithUnitDesc(ncirrid, TRIM(eqnname), 'ppm', &
              TRIM(EQN_NAMES(i))//' in micromoles per mole of air', ncirrids(i))            
        ENDDO
        call checknc(nf90_enddef(ncirrid))
      END SUBROUTINE NewInitSaveData

      SUBROUTINE checknc(status)
        use netcdf
        integer, intent(in) :: status
        
        if(status /= nf90_noerr) then
          print *, trim(nf90_strerror(status))
          stop 2
        end if
      END SUBROUTINE checknc

      SUBROUTINE AddStdVar(ncid)
        use model_Global, ONLY : ncstdids, ncconcid, ncirrid
        
        integer, intent(in) :: ncid
        integer i
        i = 1
        call AddVarWithUnitDesc(ncid, 'TIME', 'seconds from start', &
          'seconds from starting time (global variable SDATE)', ncstdids(i))
        i = i + 1
        call AddVarWithUnitDesc(ncid, 'TFLAG', '<YYYYJJJ, HHMMSS>', &
          'Julian data and time', ncstdids(i))
        i = i + 1
        call AddVarWithUnitDesc(ncid, 'LAT', 'decimal degrees east', &
          'Latitude in degrees east', ncstdids(i))
        i = i + 1
        call AddVarWithUnitDesc(ncid, 'LON', 'decimal degrees north', &
          'Longitude in degrees west', ncstdids(i))
        i = i + 1
        call AddVarWithUnitDesc(ncid, 'PRESS', 'hPa', &
          'Pressure in hecta Pascals', ncstdids(i))
        i = i + 1
        call AddVarWithUnitDesc(ncid, 'TEMP', 'K', &
          'Temperature in degrees Kelvin', ncstdids(i))
        i = i + 1
        call AddVarWithUnitDesc(ncid, 'THETA', 'decimal degrees', &
          'Solar zenith angle in decimal degrees', ncstdids(i))
        i = i + 1
        call AddVarWithUnitDesc(ncid, 'CFACTOR', 'Mmolecules**1 * cm**-3', &
          'Air in micromoles per mole of air', ncstdids(i))
        if (ncid .eq. ncconcid .or. ncid .eq. ncirrid) then
            i = i + 1
            call AddVarWithUnitDesc(ncid, 'H2O', 'ppm', &
              'Water in micromoles per mole of air', ncstdids(i))
            i = i + 1
            call AddVarWithUnitDesc(ncid, 'RO2', 'ppm', &
              'Peroxy radicals in micromoles per mole of air', ncstdids(i))
        else
            i = i + 1
            call AddVarWithUnitDesc(ncid, 'H2O', 'molecules * cm**-3', &
              'Water in molecules per cubic centimeter', ncstdids(i))
            i = i + 1
            call AddVarWithUnitDesc(ncid, 'RO2', 'molecules * cm**-3', &
              'Peroxy radicals in molecules per cubic centimeter', ncstdids(i))
        endif
      END SUBROUTINE AddStdVar

      SUBROUTINE AddVarWithUnitDesc(ncid, varname, unit, desc, varid)
        use netcdf, only : nf90_inq_dimid, nf90_inquire_dimension, nf90_def_var, nf90_put_att, &
                           nf90_double, nf90_int
        integer, intent(out) :: varid
        integer ncid, dimid0, dimid1, status, dimid2, dimid3, templen
        character(*) varname, unit, desc
        character(20) tempname
        call checknc(nf90_inq_dimid(ncid, 'SIM', dimid0))
        call checknc(nf90_inq_dimid(ncid, 'TSTEP', dimid1))
        if (trim(varname) .eq. 'TFLAG') then
            call checknc(nf90_inq_dimid(ncid, 'VAR', dimid2))
            call checknc(nf90_inquire_dimension(ncid, dimid2, tempname, templen))
            call checknc(nf90_inq_dimid(ncid, 'DATE-TIME', dimid3))
            call checknc(nf90_def_var(ncid, TRIM(varname), nf90_int, &
               (/ dimid3, dimid2, dimid1, dimid0 /), varid))
        else
            call checknc(nf90_def_var(ncid, TRIM(varname), nf90_double, &
               (/ dimid1, dimid0 /), varid))
        ENDIF
        call checknc(nf90_put_att(ncid, varid, 'units', trim(unit)))
        call checknc(nf90_put_att(ncid, varid, 'var_desc', desc))
        call checknc(nf90_put_att(ncid, varid, 'long_name', varname))
      END SUBROUTINE AddVarWithUnitDesc

! End of InitSaveData function
! ****************************************************************
! ****************************************************************
!                            
! SaveData - Write LOOKAT species in the data file 
!   Parameters :                                                  
!
! ****************************************************************

      SUBROUTINE NewSaveData(counter)
        integer counter
        call WriteConc(counter)
        call WriteRate(counter)
        call WriteIrr(counter)
      END SUBROUTINE NewSaveData
      
      SUBROUTINE WriteConc(counter)
        use model_Parameters, ONLY : NVAR
        !use model_Monitor
        use model_Global, ONLY : ncconcid, ncconcids, C

        integer counter
        
        call WriteBoth(ncconcid, counter)
        call AddThisHour(ncconcid, ncconcids, C, NVAR, counter)
      END SUBROUTINE WriteConc

      SUBROUTINE WriteRate(counter)
        use model_Parameters, ONLY : NREACT
        !use model_Monitor
        use model_Global, ONLY : ncrateid, ncrateids, RCONST
        
        integer i, counter
        
        call WriteBoth(ncrateid, counter)
        call AddThisHour(ncrateid, ncrateids, RCONST, NREACT, counter)
      END SUBROUTINE WriteRate

      SUBROUTINE WriteIrr(counter)
        use model_Parameters, ONLY : NREACT
        !use model_Monitor
        use model_Global, ONLY : ncirrid, ncirrids, IRR
        
        integer i, counter
        
        call WriteBoth(ncirrid, counter)
        call AddThisHour(ncirrid, ncirrids, IRR, NREACT, counter)
        do i = 1, NREACT
            IRR(i) = 0.
        enddo
      END SUBROUTINE WriteIrr

      SUBROUTINE WriteBoth(ncid, counter)
        use model_Global, ONLY : ncstdids,TIME,LAT,LON,PRESS,TEMP,THETA,&
            CFACTOR,RO2,H2O,intcount,JDATE,ncconcid, ncirrid
        use netcdf, ONLY : nf90_inq_dimid, nf90_inquire_dimension, nf90_put_var
        
        integer, intent(in) :: ncid, counter
        integer i, j, dimid, dim, add_days, OUT_JDATE
        character*100 name
        integer, dimension(2) :: start
        integer tflag
        
        start = (/ intcount, counter /)

        i = 1
        call checknc(nf90_put_var(ncid, ncstdids(i), TIME, start))
        i = i + 1

        call checknc(nf90_inq_dimid(ncid, 'VAR', dimid))
        call checknc(nf90_inquire_dimension(ncid, dimid, name, dim))
        add_days = int(TIME)/3600/24
        OUT_JDATE = JDATE + add_days
        TFLAG = mod(int(time), 24*3600)
        TFLAG = TFLAG/3600 * 10000
        TFLAG = TFLAG + mod(int(TIME), 3600) / 60 * 100
        TFLAG = TFLAG + mod(int(TIME), 60)
        call checknc(nf90_put_var(ncid, ncstdids(i), &
          reshape((/(OUT_JDATE, j = 1, dim)/), shape = (/1, dim, 1, 1/)), &
          start = (/1, 1, intcount, counter/), stride = (/2, 1, 1, 1/)))
        call checknc(nf90_put_var(ncid, ncstdids(i), &
          reshape((/(TFLAG, j = 1, dim)/), shape = (/1, dim, 1, 1/)), &
          start = (/2, 1, intcount, counter/), stride = (/2, 1, 1, 1/)))
        i = i + 1
        call checknc(nf90_put_var(ncid, ncstdids(i), LAT, start))
        i = i + 1
        call checknc(nf90_put_var(ncid, ncstdids(i), LON, start))
        i = i + 1
        call checknc(nf90_put_var(ncid, ncstdids(i), PRESS, start))
        i = i + 1
        call checknc(nf90_put_var(ncid, ncstdids(i), TEMP, start))
        i = i + 1
        call checknc(nf90_put_var(ncid, ncstdids(i), THETA, start))
        i = i + 1
        call checknc(nf90_put_var(ncid, ncstdids(i), CFACTOR, start))
        if (ncid .eq. ncconcid .or. ncid .eq. ncirrid) then
            i = i + 1
            call checknc(nf90_put_var(ncid, ncstdids(i), H2O/CFACTOR, start))
            i = i + 1
            call checknc(nf90_put_var(ncid, ncstdids(i), RO2/CFACTOR, start))
        else
            i = i + 1
            call checknc(nf90_put_var(ncid, ncstdids(i), H2O, start))
            i = i + 1
            call checknc(nf90_put_var(ncid, ncstdids(i), RO2, start))
        endif
      END SUBROUTINE WriteBoth
      
      SUBROUTINE AddThisHour(ncid, ncids, values, nvalues, counter)
        use model_Global, ONLY : ncconcid, ncirrid, CFACTOR, intcount
        use netcdf, ONLY : nf90_put_var
        
        integer, intent(in) :: ncid, nvalues, counter
        integer, intent(in), dimension(nvalues) :: ncids
        real(kind=dp), dimension(nvalues), intent(in) :: values
        real(kind=dp) value
        integer i
        
        integer, dimension(2) :: start
        start = (/ intcount, counter/)

        do i = 1, nvalues
            value = values(i)
            if (ncid .eq. ncconcid .or. ncid .eq. ncirrid) then
                value = value / CFACTOR
            endif
            call checknc(nf90_put_var(ncid, ncids(i), value, start))
        enddo
      END SUBROUTINE AddThisHour

! End of SaveData function
! ****************************************************************

! ****************************************************************
!                            
! CloseSaveData - Close the data file 
!   Parameters :                                                  
!
! ****************************************************************

      SUBROUTINE NewSyncData ()
          USE model_Global, ONLY : ncconcid, ncrateid, ncirrid
          use netcdf, ONLY : nf90_sync
          
          call checknc(nf90_sync(ncconcid))
          call checknc(nf90_sync(ncrateid))
          call checknc(nf90_sync(ncirrid))

      END SUBROUTINE NewSyncData

      SUBROUTINE NewCloseData ()
          USE model_Global, ONLY : ncconcid, ncrateid, ncirrid
          use netcdf, ONLY : nf90_close

          call checknc(nf90_close(ncconcid))
          call checknc(nf90_close(ncrateid))
          call checknc(nf90_close(ncirrid))

      END SUBROUTINE NewCloseData

! End of CloseSaveData function
! ****************************************************************
         
#ENDINLINE
